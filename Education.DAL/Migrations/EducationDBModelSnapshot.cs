// <auto-generated />
using System;
using Education.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Education.DAL.Migrations
{
    [DbContext(typeof(EducationDB))]
    partial class EducationDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Education.Entityes.EF.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("EducationCourses");
                });

            modelBuilder.Entity("Education.Entityes.EF.LabWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("LaboratoryWorks");
                });

            modelBuilder.Entity("Education.Entityes.EF.Lector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Patronymic");

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.ToTable("Lectors");
                });

            modelBuilder.Entity("Education.Entityes.EF.LectorsCourses", b =>
                {
                    b.Property<int>("LectorId");

                    b.Property<int>("CourseId");

                    b.HasKey("LectorId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("LectorsCourses");
                });

            modelBuilder.Entity("Education.Entityes.EF.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GroupId");

                    b.Property<string>("Name");

                    b.Property<string>("Patronymic");

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Education.Entityes.EF.StudentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("StudentGroup");
                });

            modelBuilder.Entity("Education.Entityes.EF.StudentsCourses", b =>
                {
                    b.Property<int>("StudentId");

                    b.Property<int>("CourseId");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentsCourses");
                });

            modelBuilder.Entity("Education.Entityes.EF.StudentsLabWorks", b =>
                {
                    b.Property<int>("StudentId");

                    b.Property<int>("LabWorkId");

                    b.Property<int>("Rating");

                    b.HasKey("StudentId", "LabWorkId");

                    b.HasIndex("LabWorkId");

                    b.ToTable("StudentsLabWorks");
                });

            modelBuilder.Entity("Education.Entityes.EF.LabWork", b =>
                {
                    b.HasOne("Education.Entityes.EF.Course", "Course")
                        .WithMany("LaboratoryWorks")
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("Education.Entityes.EF.LectorsCourses", b =>
                {
                    b.HasOne("Education.Entityes.EF.Course", "Course")
                        .WithMany("Lecturers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Education.Entityes.EF.Lector", "Lector")
                        .WithMany("Courses")
                        .HasForeignKey("LectorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Education.Entityes.EF.Student", b =>
                {
                    b.HasOne("Education.Entityes.EF.StudentGroup", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Education.Entityes.EF.StudentsCourses", b =>
                {
                    b.HasOne("Education.Entityes.EF.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Education.Entityes.EF.Student", "Student")
                        .WithMany("Courses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Education.Entityes.EF.StudentsLabWorks", b =>
                {
                    b.HasOne("Education.Entityes.EF.LabWork", "LabWorks")
                        .WithMany()
                        .HasForeignKey("LabWorkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Education.Entityes.EF.Student", "Student")
                        .WithMany("LabWorks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
